#version 430 core

// this HAS to be equal to resolution / cells_per_axis
// so unfortunately we can not change the cells_per_axis without recompiling the shader
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer point_ssbo {
    vec3 point_offset_data[];
};

layout(r32f, binding = 1) uniform writeonly image3D volume;

uniform float resolution;
uniform int cells_per_axis;

const ivec3[27] offsets = {
    ivec3(-1,  1, -1), ivec3(0,  1, -1), ivec3(1,  1, -1),
    ivec3(-1,  0, -1), ivec3(0,  0, -1), ivec3(1,  0, -1), // LAYER UNDER
    ivec3(-1, -1, -1), ivec3(0, -1, -1), ivec3(1, -1, -1),

    ivec3(-1,  1,  0), ivec3(0,  1,  0), ivec3(1,  1,  0),
    ivec3(-1,  0,  0), ivec3(0,  0,  0), ivec3(1,  0,  0), // LAYER IN LINE
    ivec3(-1, -1,  0), ivec3(0, -1,  0), ivec3(1, -1,  0),

    ivec3(-1,  1,  1), ivec3(0,  1,  1), ivec3(1,  1,  1),
    ivec3(-1,  0,  1), ivec3(0,  0,  1), ivec3(1,  0,  1), // LAYER ABOVE
    ivec3(-1, -1,  1), ivec3(0, -1,  1), ivec3(1, -1,  1),
};

float dist2(vec3 pos, vec3 point) {
    vec3 pp = point - pos;
    return dot(pp, pp);
}

int flatten_index(ivec3 point_pos) {
    return point_pos.x + cells_per_axis * (point_pos.y + cells_per_axis * point_pos.z);
}

vec3 point_at_index(vec3 group_id, ivec3 index) {
    return group_id / float(cells_per_axis) + point_offset_data[flatten_index(index)];
}

float enumerate_points(vec3 position) {
    ivec3 cell = ivec3(gl_WorkGroupID);
    float min_dst = resolution;

    // TODO(nix3l): wraparound for cells on the edges

    // loop through all adjacent cells and get the smallest distance
    // instead of looping through all points in the cube
    for(int i = 0; i < 27; i ++) {
        float dst = dist2(position, point_at_index(gl_WorkGroupID + offsets[i], cell + offsets[i]));
        min_dst = min(min_dst, dst);
    }

    return 1.0f - (cells_per_axis * sqrt(min_dst));
}

void main(void) {
    ivec3 position = ivec3(gl_GlobalInvocationID);
    float dst = enumerate_points(vec3(gl_GlobalInvocationID) / resolution);

    imageStore(volume, position, vec4(dst));
}
